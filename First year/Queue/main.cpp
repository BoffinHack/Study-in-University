#include<iostream>

using namespace std;

class queue //Класс очереди
{
private:
    struct queue_ob// Структура для хранения элементов очереди
    {
        int value;//Поле для хранения значения элемента очереди
        queue_ob *addr; // Поле для хранения слеющего элемента
    };

    queue_ob *head; // указатель, хранящий адресс головы очереди
    queue_ob *tail; // Указатель хранящий адрес хвоста
    int size; //Текущий размер очереди

public:
    queue(int x)// Конструктор класса
                //В параметр передается голова очереди
    {
        head=new(queue_ob); //Выделяем память под элемент
        tail=head; // При создании очереди хвост и голова являются одним и тем же элементом
        head->value=x; // Записываем значение
        head->addr=0; // Адрес ноль, так как следующего элемента пока нет
        size=1; // После выделения памяти и заполянения полей структуры очередь стала иметь размер 1
    }

    int stack_size()//Функция возвращает размер очереди(кол-во элеменетов)
    {
        return size;
    }

void push(int value)// Добавляет(вталкивает) элемент в очередь
{
    size++;// Кол-во элементов очереди увеличивается
    queue_ob *temp=new(queue_ob); // Выделяем память под новый хвост очереди
    temp->addr=0; // Записываем в поле адреса нового хвоста ноль, так как за ничего нету
    temp->value=value; //Заполняем поле значения нового хвоста
    tail->addr=temp; // Записываем в поле адреса старого хвоста адрес нового хвоста
    tail=temp; //Записываем в указель хвоста адрес действительного хвоста
}

void pop(int *ret)//Удаляет элемент(выталкивает) и возвращает его
                 // По адресу, хранящемся в ret, передается значение удаляемой головы
{
    if(size == 0)
    {
        cout<<"Очередь пуста - удалять нечего!"<<endl;
        return;
    }

    queue_ob *temp=head; // записываем адрес головы
    *ret=head->value; // записываем значени головы
    head=head->addr; // изменяем адрес головы
    delete temp;  // удаляем старую голову
    size--; // уменьшаем размер
}

void peek(int *ret)//Выгружает значение по адресу, передаваемому в парметре
{
    if(size == 0) // Если очередь пуста(size == 0), то ничего не выгружает
        {
            cout<<"Очередь пуста!"<<endl;
            return;
        }
    *ret=head->value;// Выгружаем значение головы
}

};// Конец класса очереди
int main()
{
    system("chcp 1251");
    int b;
    queue a(1); //Создлаем очередь и загружаем в очередь 1
    a.push(2); //Загружаем 2
    a.push(3); //Загружаем 3
    a.pop(&b); // В b выгружается 1
    a.pop(&b);  //В b выгружается 2
    a.pop(&b);

    cout<<b<<endl; // На экран выведится 2
    system("pause");

    return 0;
}
